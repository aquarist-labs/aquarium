from typing import Callable, Dict, List, Optional, Sequence, Tuple, Union

class Version:
    major: int
    minor: int
    extra: int
    def __init__(self, major: int, minor: int, extra: int) -> None: ...

class Error(Exception): ...
class RadosStateError(Error): ...
class IoCtx: ...

class Rados:
    def __init__(
        self,
        rados_id: Optional[str] = ...,
        name: Optional[str] = ...,
        clustername: Optional[str] = ...,
        conf_defaults: Optional[Dict[str, str]] = ...,
        conffile: Union[str, int, None] = ...,
        flags: Optional[int] = ...,
        context: Optional[object] = ...,
    ) -> None: ...
    def get_addrs(self) -> List[str]: ...
    def require_state(self, state: str) -> None: ...
    def shutdown(self) -> None: ...
    def version(self) -> Version: ...
    def conf_read_file(self, path: Optional[str] = ...) -> None: ...
    def conf_parse_argv(self, args: Sequence[str]) -> None: ...
    def conf_parse_env(self, var: Optional[str] = ...) -> None: ...
    def conf_get(self, option: str) -> Optional[str]: ...
    def conf_set(self, option: str, val: str) -> None: ...
    def ping_monitor(self, mon_id: str) -> None: ...
    def connect(self, timeout: Optional[int] = ...) -> None: ...
    def get_instance_id(self) -> int: ...
    def get_cluster_stats(self) -> Dict[str, int]: ...
    def pool_exists(self, pool_name: str) -> bool: ...
    def pool_lookup(self, pool_name: str) -> int: ...
    def pool_reverse_lookup(self, pool_id: int) -> str: ...
    def create_pool(
        self,
        pool_name: str,
        crush_rule: Optional[int] = ...,
        auid: Optional[int] = ...,
    ) -> None: ...
    def get_pool_base_tier(self, pool_id: int) -> int: ...
    def delete_pool(self, pool_name: str) -> None: ...
    def get_inconsistent_pgs(self, pool_id: int) -> List[str]: ...
    def list_pools(self) -> List[str]: ...
    def get_fsid(self) -> str: ...
    def open_ioctx(self, ioctx_name: str) -> IoCtx: ...
    def open_ioctx2(self, pool_id: int) -> IoCtx: ...
    def mon_command(
        self,
        cmd: str,
        inbuf: bytes,
        timeout: int = ...,
        target: Optional[Union[str, int]] = ...,
    ) -> Tuple[int, bytes, str]: ...
    def osd_command(
        self, osdid: int, cmd: str, inbuf: bytes, timeout: int = ...
    ) -> Tuple[int, bytes, str]: ...
    def mgr_command(
        self,
        cmd: str,
        inbuf: bytes,
        timeout: int = ...,
        target: Optional[str] = ...,
    ) -> Tuple[int, bytes, str]: ...
    def pg_command(
        self, pgid: str, cmd: str, inbuf: bytes, timeout: int = ...
    ) -> Tuple[int, bytes, str]: ...
    def wait_for_latest_osdmap(self) -> int: ...
    def blocklist_add(
        self, client_address: str, expire_seconds: int = ...
    ) -> None: ...
    def monitor_log(
        self,
        level: str,
        callback: Optional[
            Callable[[object, str, str, str, int, int, int, str, str], None]
        ] = ...,
        arg: Optional[object] = ...,
    ) -> None: ...
    def monitor_log2(
        self,
        level: str,
        callback: Optional[
            Callable[
                [object, str, str, str, str, int, int, int, str, str], None
            ]
        ],
        arg: Optional[object] = ...,
    ) -> None: ...
